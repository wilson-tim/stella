package uk.co.firstchoice.common.base.pooling.support;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Properties;

import uk.co.firstchoice.common.base.pooling.Resource;
import uk.co.firstchoice.common.base.pooling.ResourceException;

/**
 * This is a pooled database connection for JVM V1.4.
 *  
 */
public abstract class PooledConnection14 extends BasePooledConnection implements
		Resource, Connection {
	public PooledConnection14() {
	}

	public PooledConnection14(Properties props) throws ResourceException {
		super(props);
	}

	public Savepoint setSavepoint() throws SQLException {
		return _internalConnection.setSavepoint();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return _internalConnection.setSavepoint(name);
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		_internalConnection.rollback(savepoint);
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		_internalConnection.releaseSavepoint(savepoint);
	}

	public void setHoldability(int holdability) throws SQLException {
		_internalConnection.setHoldability(holdability);
	}

	public int getHoldability() throws SQLException {
		return _internalConnection.getHoldability();
	}

	public Statement createStatement(int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return _internalConnection.createStatement(resultSetType,
				resultSetConcurrency, resultSetHoldability);
	}

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return _internalConnection.prepareCall(sql, resultSetType,
				resultSetConcurrency, resultSetHoldability);
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException {
		return _internalConnection.prepareStatement(sql, autoGeneratedKeys);
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
			throws SQLException {
		return _internalConnection.prepareStatement(sql, columnIndexes);
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames)
			throws SQLException {
		return _internalConnection.prepareStatement(sql, columnNames);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return _internalConnection.prepareStatement(sql, resultSetType,
				resultSetConcurrency, resultSetHoldability);
	}
}